services:
  next:
    container_name: kapowar-next
    image: ghcr.io/sparcs-kaist/imgeffect-kapowar
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - ${PORT:-3000}:3000
    volumes:
      - kapowar-logs:/app/logs
    environment:
      TZ: Asia/Seoul
      DATABASE_HOST: kapowar-postgres
      DATABASE_USER: ${DATABASE_USER:?}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:?}
      JWT_SECRET: ${JWT_SECRET:?}
      TRUST_PROXY: ${TRUST_PROXY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:?}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:?}
      AWS_REGION: ${AWS_REGION:?}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME:?}
      AWS_CF_URL: ${AWS_CF_URL}
      GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
      REDIS_URL: redis://kapowar-redis
      PM2_INSTANCES: ${PM2_INSTANCES}
    labels:
      - com.centurylinklabs.watchtower.scope=kapowar

  migrator:
    container_name: kapowar-migrator
    image: ghcr.io/sparcs-kaist/imgeffect-kapowar-migrator
    environment:
      TZ: Asia/Seoul
      DATABASE_HOST: kapowar-postgres
      DATABASE_USER: ${DATABASE_USER:?}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:?}
    labels:
      - com.centurylinklabs.watchtower.scope=kapowar
    command: "true"

  postgres:
    container_name: kapowar-postgres
    image: bitnami/postgresql:17
    restart: unless-stopped
    ports:
      - 5432:5432
    volumes:
      - kapowar-data:/bitnami/postgresql
    environment:
      POSTGRESQL_TIMEZONE: Asia/Seoul
      POSTGRESQL_USERNAME: ${DATABASE_USER:?}
      POSTGRESQL_PASSWORD: ${DATABASE_PASSWORD:?}
      POSTGRESQL_DATABASE: ${DATABASE_USER:?}
      POSTGRESQL_REPLICATION_MODE: ${DATABASE_REPL_MODE:-master}
      POSTGRESQL_REPLICATION_USER: ${DATABASE_REPL_USER:?}
      POSTGRESQL_REPLICATION_PASSWORD: ${DATABASE_REPL_PASSWORD:?}
      POSTGRESQL_MASTER_HOST: ${DATABASE_REPL_HOST}
      POSTGRESQL_LOG_HOSTNAME: yes
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRESQL_USERNAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    container_name: kapowar-redis
    image: redis:8-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 5s
      timeout: 5s
      retries: 5

  watchtower:
    container_name: kapowar-watchtower
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/config.json
    environment:
      TZ: Asia/Seoul
    labels:
      - com.centurylinklabs.watchtower.scope=kapowar
    command: --scope kapowar --interval 30 --cleanup

volumes:
  kapowar-data:
    external: true
  kapowar-logs:
    external: true
